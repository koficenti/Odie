package today.astrum

object TokenLookup {
    private val table = hashMapOf<String, TokenEnum>(
        "for" to TokenEnum.For,
        "while" to TokenEnum.While,
        "if" to TokenEnum.If,
        "else" to TokenEnum.Else,
        "function" to TokenEnum.Function,
        "let" to TokenEnum.Let,
        "var" to TokenEnum.Var,
        "const" to TokenEnum.Const,
        "return" to TokenEnum.Return,
        "try" to TokenEnum.Try,
        "catch" to TokenEnum.Catch,
        "finally" to TokenEnum.Finally,
        "class" to TokenEnum.Class,
        "implements" to TokenEnum.Implements,
        "extends" to TokenEnum.Extends,
        "public" to TokenEnum.Public,
        "private" to TokenEnum.Private,
        "protected" to TokenEnum.Protected,
        "\"" to TokenEnum.DoubleQuote,
        "'" to TokenEnum.SingleQuote,
        "string" to TokenEnum.StringType,
        "void" to TokenEnum.VoidType,
        "number" to TokenEnum.NumberType,
        "boolean" to TokenEnum.BooleanType,
        "any" to TokenEnum.AnyType,
        "never" to TokenEnum.NeverType,
        "|" to TokenEnum.Pipe,
        "enum" to TokenEnum.Enum,
        "interface" to TokenEnum.Interface,
        "type" to TokenEnum.Type,
        "namespace" to TokenEnum.Namespace,
        "import" to TokenEnum.Import,
        "export" to TokenEnum.Export,
        "as" to TokenEnum.As,
        "=" to TokenEnum.Equal,
        ">" to TokenEnum.GreaterThan,
        "<" to TokenEnum.LessThan,
        "+" to TokenEnum.Plus,
        "-" to TokenEnum.Minus,
        "*" to TokenEnum.Asterisk,
        "/" to TokenEnum.Slash,
        "==" to TokenEnum.EqualEqual,
        "!" to TokenEnum.Not,
        "!=" to TokenEnum.NotEqual,
        ">=" to TokenEnum.GreaterThanOrEqual,
        "<=" to TokenEnum.LessThanOrEqual,
        "`" to TokenEnum.Backtick,
        ":" to TokenEnum.Colon,
        ";" to TokenEnum.SemiColon,
        "=>" to TokenEnum.Arrow,
        "&" to TokenEnum.And,
        "&&" to TokenEnum.LogicalAnd,
        "||" to TokenEnum.LogicalOr,
        "?" to TokenEnum.QuestionMark,
        "++" to TokenEnum.Increment,
        "--" to TokenEnum.Decrement,
        "." to TokenEnum.Dot,
        "{" to TokenEnum.LeftCurlyBrace,
        "}" to TokenEnum.RightCurlyBrace,
        "(" to TokenEnum.LeftParen,
        ")" to TokenEnum.RightParen,
        "," to TokenEnum.Comma,
        "//" to TokenEnum.SingleLineComment,
        "/*" to TokenEnum.MultiLineComment,
        "*/" to TokenEnum.MultiLineComment)
    fun find(str: String): TokenEnum {
        this.table.get(str)?.let {
            return it
        }
        return TokenEnum.Unknown
    }
}